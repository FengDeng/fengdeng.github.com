<!doctype html>



  


<html class="theme-next muse use-motion">
<head>
  <meta charset="UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>



<meta http-equiv="Cache-Control" content="no-transform" />
<meta http-equiv="Cache-Control" content="no-siteapp" />












  
  
  <link href="/vendors/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" />




  
  
  
  

  
    
    
  

  

  

  

  

  
    
    
    <link href="//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext" rel="stylesheet" type="text/css">
  






<link href="/vendors/font-awesome/css/font-awesome.min.css?v=4.4.0" rel="stylesheet" type="text/css" />

<link href="/css/main.css?v=5.0.1" rel="stylesheet" type="text/css" />


  <meta name="keywords" content="Hexo, NexT" />








  <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico?v=5.0.1" />






<meta name="description" content="只要一行代码
writeTextField.rx_text.bindTo(displayLabel.rx_text)
看下效果

那么这到底是如何实现的呢">
<meta property="og:type" content="article">
<meta property="og:title" content="RxSwift源码解读之UITextField是如何和一个UILabel绑定的">
<meta property="og:url" content="http://yoursite.com/2016/01/22/2016-01-22-rxswift-dao-di-[">
<meta property="og:site_name" content="FengDeng的博客">
<meta property="og:description" content="只要一行代码
writeTextField.rx_text.bindTo(displayLabel.rx_text)
看下效果

那么这到底是如何实现的呢">
<meta property="og:image" content="https://raw.githubusercontent.com/FengDeng/Blog_Image/master/RxSwift.gif">
<meta property="og:updated_time" content="2016-01-25T03:28:18.000Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="RxSwift源码解读之UITextField是如何和一个UILabel绑定的">
<meta name="twitter:description" content="只要一行代码
writeTextField.rx_text.bindTo(displayLabel.rx_text)
看下效果

那么这到底是如何实现的呢">
<meta name="twitter:image" content="https://raw.githubusercontent.com/FengDeng/Blog_Image/master/RxSwift.gif">



<script type="text/javascript" id="hexo.configuration">
  var NexT = window.NexT || {};
  var CONFIG = {
    scheme: 'Muse',
    sidebar: {"position":"left","display":"post"},
    fancybox: true,
    motion: true,
    duoshuo: {
      userId: 0,
      author: 'Author'
    }
  };
</script>




  <link rel="canonical" href="http://yoursite.com/2016/01/22/2016-01-22-rxswift-dao-di-["/>

  <title> RxSwift源码解读之UITextField是如何和一个UILabel绑定的 | FengDeng的博客 </title>
</head>

<body itemscope itemtype="http://schema.org/WebPage" lang="chinese">

  










  
  
    
  

  <div class="container one-collumn sidebar-position-left page-post-detail ">
    <div class="headband"></div>

    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-meta ">
  

  <div class="custom-logo-site-title">
    <a href="/"  class="brand" rel="start">
      <span class="logo-line-before"><i></i></span>
      <span class="site-title">FengDeng的博客</span>
      <span class="logo-line-after"><i></i></span>
    </a>
  </div>
  <p class="site-subtitle">垂死病中惊坐起，还有BUG要调试</p>
</div>

<div class="site-nav-toggle">
  <button>
    <span class="btn-bar"></span>
    <span class="btn-bar"></span>
    <span class="btn-bar"></span>
  </button>
</div>

<nav class="site-nav">
  

  
    <ul id="menu" class="menu">
      
        
        <li class="menu-item menu-item-home">
          <a href="/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-home"></i> <br />
            
            Startseite
          </a>
        </li>
      
        
        <li class="menu-item menu-item-archives">
          <a href="/archives" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />
            
            Archiv
          </a>
        </li>
      
        
        <li class="menu-item menu-item-tags">
          <a href="/tags" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />
            
            Tags
          </a>
        </li>
      

      
    </ul>
  

  
</nav>

 </div>
    </header>

    <main id="main" class="main">
      <div class="main-inner">
        <div class="content-wrap">
          <div id="content" class="content">
            

  <div id="posts" class="posts-expand">
    

  
  

  
  
  

  <article class="post post-type-normal " itemscope itemtype="http://schema.org/Article">

    
      <header class="post-header">

        
        
          <h1 class="post-title" itemprop="name headline">
            
            
              
                RxSwift源码解读之UITextField是如何和一个UILabel绑定的
              
            
          </h1>
        

        <div class="post-meta">
          <span class="post-time">
            <span class="post-meta-item-icon">
              <i class="fa fa-calendar-o"></i>
            </span>
            <span class="post-meta-item-text">Veröffentlicht am</span>
            <time itemprop="dateCreated" datetime="2016-01-22T16:23:30+08:00" content="2016-01-22">
              2016-01-22
            </time>
          </span>

          

          
            
          

          

          
          

          
        </div>
      </header>
    


    <div class="post-body" itemprop="articleBody">

      
      

      
        <p>只要一行代码</p>
<pre><code>writeTextField.rx_text.bindTo(displayLabel.rx_text)
</code></pre><p>看下效果</p>
<p><img src="https://raw.githubusercontent.com/FengDeng/Blog_Image/master/RxSwift.gif" alt="image"></p>
<p>那么这到底是如何实现的呢</p>
<a id="more"></a>
<p>##整体分析<br>    代码层：<br>    writeTextField的rx_text通过bingTo这个函数和displayLabel的rx_text绑定了。</p>
<pre><code>Rx思想：
一个被观察者(Observable)通过bingTo函数和一个观察者(Observer)绑定了，这样无论被观察这如何变化，观察者都了如指掌
</code></pre><p>##深层解析</p>
<p>###writeTextField.rx_text</p>
<p>这是一个Observable。也是一个Observer。<br>rx_text是RxSwift给UITextField的一个拓展属性，上代码</p>
<pre><code>public var rx_text: ControlProperty&lt;String&gt; {
    return rx_value(getter: { [weak self] in
        self?.text ?? &quot;&quot;
    }, setter: { [weak self] value in
        self?.text = value
    })
}
</code></pre><p>rx_text是一个<code>ControlProperty&lt;String&gt;</code>。由后面的函数生成。我们去看下那个函数</p>
<pre><code>func rx_value&lt;T: Equatable&gt;(getter getter: () -&gt; T, setter: T -&gt; Void) -&gt; ControlProperty&lt;T&gt; {
    let source: Observable&lt;T&gt; = Observable.create { [weak self] observer in
        guard let control = self else {
            observer.on(.Completed)
            return NopDisposable.instance
        }

        observer.on(.Next(getter()))

        let controlTarget = ControlTarget(control: control, controlEvents: [.AllEditingEvents, .ValueChanged]) { control in
            observer.on(.Next(getter()))
        }

        return AnonymousDisposable {
            controlTarget.dispose()
        }
    }
        .distinctUntilChanged()
        .takeUntil(rx_deallocated)

    return ControlProperty&lt;T&gt;(values: source, valueSink: AnyObserver { event in
        MainScheduler.ensureExecutingOnScheduler()

        switch event {
        case .Next(let value):
            setter(value)
        case .Error(let error):
            bindingErrorToInterface(error)
            break
        case .Completed:
            break
        }
    })
}
</code></pre><p>这个函数是UIControl的，所有UIControl的所有子类都有哈。UITextField是UIControl的子类</p>
<p>函数有点长，我们一步一步分析，其实就两句</p>
<p>先说下第一句，source的生成过程。source是一个Observable<t>，即这里的Observable<string></string></t></p>
<ol>
<li>首先获取self，获取不到直接completed</li>
<li>获取到了，直接Next一个刚刚传进来的getter。这里是<code>self?.text ?? &quot;&quot;</code>，即流走一个Observable<string></string></li>
<li>生成一个<code>ControlTarget</code>，这个<code>ControlTarget</code>每当<code>ValueChanged</code>都会流走一个Observable<string>（这个<code>ControlTarget</code>有点多，下回讲）</string></li>
<li>上面三步走完后 ，这里的是一个Observable<string>。对这个Observable<string>进行<code>distinctUntilChanged()</code>,这个函数说明，只有String改变才会继续往下流</string></string></li>
<li><code>takeUntil(rx_deallocated)</code>,直到这个UITextField被释放</li>
<li>source结束，source的这个流程就是上面的5步</li>
</ol>
<p>其实如果一个UITextField的rx_text作为一个Observable，上面的代码已经足够了。</p>
<p>为了实现UITextField也可以作为observer，于是有了下面的代码。</p>
<p>再说第二句，通过source，生成一个<code>ControlProperty&lt;String&gt;</code>。这个被观察者才是本函数要返回的类型。它既是一个Observer，也是一个Observable</p>
<ol>
<li>直接调用<code>ControlProperty&lt;PropertyType&gt;</code>的初始化方法生成</li>
<li><p>看一下初始化方法带进去的一个闭包</p>
<pre><code>AnyObserver { event in
    MainScheduler.ensureExecutingOnScheduler()

    switch event {
    case .Next(let value):
        setter(value)
    case .Error(let error):
        bindingErrorToInterface(error)
        break
    case .Completed:
        break
    }
</code></pre></li>
</ol>
<p>因为UI操作都必须在主线程。<code>MainScheduler.ensureExecutingOnScheduler()</code>这一句话是判断当前线程是不是在主线程<br>下面的代码是当UITextField作为一个observer时，接收到一个流的响应。</p>
<p>###displayLabel.rx_text</p>
<p>这是一个Observer<br>rx_text是RxSwift给UILabel的一个拓展属性，上代码</p>
<pre><code>public var rx_text: AnyObserver&lt;String&gt; {
    return AnyObserver { [weak self] event in
        MainScheduler.ensureExecutingOnScheduler()

        switch event {
        case .Next(let value):
            self?.text = value
        case .Error(let error):
            bindingErrorToInterface(error)
            break
        case .Completed:
            break
        }
    }
}
</code></pre><p>很简单，只有响应流的代码。有流过来，就<code>self?.text = value</code></p>
<p>有同学可能有疑问了，UITextField可以被观察，也可以是观察者。UILabel只能是观察者，我要是想观察UILabel的text怎么办呢？？？</p>
<p>哈哈，easy，please try KVO</p>
<pre><code>displayLabel.rx_observe(String.self, &quot;text&quot;).subscribe { (event) -&gt; Void in
        switch event{
        case .Next(let m):
            print(m)
        case .Completed:
            print(&quot;&quot;)
        case .Error(let t):
            print(t)
        }
    }
</code></pre><p>KVO还是比较简单的，大家可以自己看看。或许下一次我写写</p>
<p>###bindTo<br><code>bingTo</code>是Observable的拓展</p>
<pre><code>public func bindTo&lt;O: ObserverType where O.E == E&gt;(observer: O) -&gt; Disposable {
    return self.subscribe(observer)
}
</code></pre><p>内部调用的Observable的subscribe方法来和一个observer进行关联</p>
<p>这里就是调用了ControlProperty<string>的subscribe方法.</string></p>
<pre><code>public func subscribe&lt;O : ObserverType where O.E == E&gt;(observer: O) -&gt; Disposable {
    return _values.subscribe(observer)
}
</code></pre><p>_values.subscribe(observer)调用了SubscribeOn这个类的subscribe方法，</p>
<p>SubscribeOn没实现subscribe方法，于是去他的父类Producer里去调用了</p>
<pre><code>override func subscribe&lt;O : ObserverType where O.E == Element&gt;(observer: O) -&gt; Disposable {
    if !CurrentThreadScheduler.isScheduleRequired {
        return run(observer)
    }
    else {
        return CurrentThreadScheduler.instance.schedule(()) { _ in
            return self.run(observer)
        }
    }
}
</code></pre><p>Producer又去它的子类SubscribeOn去调用了run方法</p>
<pre><code>override func run&lt;O : ObserverType where O.E == Ob.E&gt;(observer: O) -&gt; Disposable {
    let sink = SubscribeOnSink(parent: self, observer: observer)
    sink.disposable = sink.run()
    return sink
}
</code></pre><p>当UITextField的每一个值产生时，调用了下面这个方法，在<code>SubscribeOnSink</code>这个类中</p>
<pre><code>func on(event: Event&lt;Element&gt;) {
    forwardOn(event)

    if event.isStopEvent {
        self.dispose()
    }
}
</code></pre><p><code>forwardOn(event)</code>这个方法又去<code>SubscribeOnSink</code>这个类的父类中去调用了</p>
<pre><code>final func forwardOn(event: Event&lt;O.E&gt;) {
    if disposed {
        return
    }
    _observer.on(event)
}
</code></pre><p>最终调到了<code>_observer.on(event)</code>这一句话。也是就UILabel的rx_text的<code>on</code>方法，<code>on(event)</code>是一个闭包，在UILabel的rx_text中等同以下代码</p>
<pre><code>{ [weak self] event in
    MainScheduler.ensureExecutingOnScheduler()

    switch event {
    case .Next(let value):
        self?.text = value
    case .Error(let error):
        bindingErrorToInterface(error)
        break
    case .Completed:
        break
    }
</code></pre><p>以上是一个复杂的继承🌲的方法调用。多看多揣摩吧！</p>
<p>###至此，一个完整的Observable和一个Observer的绑定结束</p>

      
    </div>

    <div>
      
        

      
    </div>

    <div>
      
        

      
    </div>

    <footer class="post-footer">
      

      
        <div class="post-nav">
          <div class="post-nav-next post-nav-item">
            
              <a href="/2016/01/13/2016-01-13-rxswift-observablezhi-just/" rel="next" title="RxSwift Observable之Empty,Map的实现">
                <i class="fa fa-chevron-left"></i> RxSwift Observable之Empty,Map的实现
              </a>
            
          </div>

          <div class="post-nav-prev post-nav-item">
            
              <a href="/2016/01/29/2016-01-29-a-github-api-by-rxswift/" rel="prev" title="A GitHub API by RxSwift">
                A GitHub API by RxSwift <i class="fa fa-chevron-right"></i>
              </a>
            
          </div>
        </div>
      

      
      
    </footer>
  </article>



    <div class="post-spread">
      
    </div>
  </div>


          </div>
          


          
  <div class="comments" id="comments">
    
  </div>


        </div>
        
          
  
  <div class="sidebar-toggle">
    <div class="sidebar-toggle-line-wrap">
      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>
    </div>
  </div>

  <aside id="sidebar" class="sidebar">
    <div class="sidebar-inner">

      

      
        <ul class="sidebar-nav motion-element">
          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap" >
            Inhaltsverzeichnis
          </li>
          <li class="sidebar-nav-overview" data-target="site-overview">
            Übersicht
          </li>
        </ul>
      

      <section class="site-overview sidebar-panel ">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
          <img class="site-author-image" itemprop="image"
               src="/images/avatar.gif"
               alt="" />
          <p class="site-author-name" itemprop="name"></p>
          <p class="site-description motion-element" itemprop="description"></p>
        </div>
        <nav class="site-state motion-element">
          <div class="site-state-item site-state-posts">
            <a href="/archives">
              <span class="site-state-item-count">8</span>
              <span class="site-state-item-name">Artikel</span>
            </a>
          </div>

          

          

        </nav>

        

        <div class="links-of-author motion-element">
          
        </div>

        
        

        
        

      </section>

      
        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">
          <div class="post-toc">
            
              
            
            
              <p class="post-toc-empty">Dieser Artikel hat kein Inhaltsverzeichnis</p>
            
          </div>
        </section>
      

    </div>
  </aside>


        
      </div>
    </main>

    <footer id="footer" class="footer">
      <div class="footer-inner">
        <div class="copyright" >
  
  &copy; 
  <span itemprop="copyrightYear">2016</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder"></span>
</div>

<div class="powered-by">
  Erstellt mit  <a class="theme-link" href="https://hexo.io">Hexo</a>
</div>

<div class="theme-info">
  Theme -
  <a class="theme-link" href="https://github.com/iissnan/hexo-theme-next">
    NexT.Muse
  </a>
</div>

        

        
      </div>
    </footer>

    <div class="back-to-top">
      <i class="fa fa-arrow-up"></i>
    </div>
  </div>

  

<script type="text/javascript">
  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {
    window.Promise = null;
  }
</script>









  



  
  <script type="text/javascript" src="/vendors/jquery/index.js?v=2.1.3"></script>

  
  <script type="text/javascript" src="/vendors/fastclick/lib/fastclick.min.js?v=1.0.6"></script>

  
  <script type="text/javascript" src="/vendors/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>

  
  <script type="text/javascript" src="/vendors/velocity/velocity.min.js?v=1.2.1"></script>

  
  <script type="text/javascript" src="/vendors/velocity/velocity.ui.min.js?v=1.2.1"></script>

  
  <script type="text/javascript" src="/vendors/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>


  


  <script type="text/javascript" src="/js/src/utils.js?v=5.0.1"></script>

  <script type="text/javascript" src="/js/src/motion.js?v=5.0.1"></script>



  
  

  
  <script type="text/javascript" src="/js/src/scrollspy.js?v=5.0.1"></script>
<script type="text/javascript" src="/js/src/post-details.js?v=5.0.1"></script>



  


  <script type="text/javascript" src="/js/src/bootstrap.js?v=5.0.1"></script>



  



  




  
  

  

  

  

</body>
</html>
